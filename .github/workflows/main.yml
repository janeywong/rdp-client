name: "publish"

on:
  push:
    # 匹配特定标签 (refs/tags)
    tags:
      - 'v*' # 推送事件匹配 v*, 例如 v1.0，v20.15.10 等来触发工作流
  workflow_dispatch:

# `tauri-action` can also upload app bundles to an existing GitHub release.
# This workflow uses different actions to create and publish the release.
# `tauri-action` will only build and upload the app bundles to the specified release.

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set output
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      # 安装 Node.js
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 发布 Release，使用自定义名称
      - name: Generate changelog
        id: create_release
        run: npx changelogithub --draft --name ${{ steps.vars.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

#      - name: get version
#        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

#      - name: create release
#        id: create-release
#        uses: actions/github-script@v6
#        with:
#          script: |
#            const { data } = await github.rest.repos.createRelease({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              tag_name: `hi-new-v${process.env.PACKAGE_VERSION}`,
#              name: `hi new v${process.env.PACKAGE_VERSION}`,
#              body: 'Take a look at the assets to download and install this app.',
#              draft: true,
#              prerelease: false
#            })
#            return data.id

  # 编译 Tauri
  build-app:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            target: "aarch64-apple-darwin"
          - platform: "macos-latest"
            target: "x86_64-apple-darwin"

          - platform: "windows-latest"
            target: "x86_64-pc-windows-msvc"
          - platform: "windows-latest"
            target: "i686-pc-windows-msvc"
          - platform: "windows-latest"
            target: "aarch64-pc-windows-msvc"

          - platform: "ubuntu-22.04"
            target: "x86_64-unknown-linux-gnu"

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Install rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      # 安装 Rust
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      # 使用 Rust 缓存，加快安装速度
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: target

      # 获取 pnpm 缓存
      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      # 安装依赖, 前端打包
      - name: Install app dependencies and build web
        run: pnpm install --frozen-lockfile

      # 执行构建，以及推送 github release
      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          CI: false
          PLATFORM: ${{ matrix.platform }}
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
#          releaseId: ${{ needs.create-release.outputs.release_id }}
          tagName: ${{ github.ref_name }}
          releaseName: HINEW ${{ needs.create-release.outputs.APP_VERSION }}
          releaseBody: ""
          includeRelease: true
          releaseDraft: true
          prerelease: false
          args: --target ${{ matrix.target }}

      - name: Run publish script
        run: pnpm run publisher
        env:
          ARTIFACT_PATHS: ${{ steps.build.outputs.artifactPaths }}
          PLATFORM: ${{ matrix.platform }}
          TARGET: ${{ matrix.target }}
          WORKSPACE: ${{ github.workspace }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-app]

    steps:
#      - name: publish release
#        id: publish-release
#        uses: actions/github-script@v6
#        env:
#          release_id: ${{ needs.create-release.outputs.release_id }}
#        with:
#          script: |
#            github.rest.repos.updateRelease({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              release_id: process.env.release_id,
#              draft: false,
#              prerelease: false
#            })

      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9.x.x

      - name: install frontend dependencies
        run: pnpm install

      - name: publish to qiniu kodo
        run: pnpm publish-qiniu
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          QN_ACCESS_KEY: ${{ secrets.QN_ACCESS_KEY }}
          QN_SECRET_KEY: ${{ secrets.QN_SECRET_KEY }}
          QN_BUCKET: mission
          QN_PREFIX: hinew
          QN_PUBLIC_URL: https://cdn.medrd.net
          REPOSITORY_OWNER: janeywong
          REPOSITORY_NAME: HINEW
